name: Deploy VMs Agent
on:
  workflow_dispatch:
    inputs:
      var_file:
        description: "Variables file (within master directory)"
        required: true
        default: "main.tf"

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Checkout vm-test repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/vm-test
          path: vm-test
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: View worker folder contents
        run: ls -la ./vm-test/worker || echo "Worker folder not found in vm-test repository"
      
      - name: Set up Kubernetes credentials
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          sudo mkdir -p /root/.kube
          echo "$KUBE_CONFIG" | sudo tee /root/.kube/config > /dev/null
          sudo chmod 644 /root/.kube/config

      - name: Find latest run ID of Deploy VMs Master
        id: get-latest-run
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          RUN_ID=$(gh run list --workflow "Deploy VMs Master" --json databaseId --jq '.[0].databaseId' || echo "")
          if [[ -z "$RUN_ID" ]]; then
            echo "Error: No previous runs found for Deploy VMs Master"
            exit 1
          fi
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV

      - name: Download Master Outputs from latest run
        uses: dawidd6/action-download-artifact@v3
        with:
          github_token: ${{ secrets.PAT_TOKEN }}
          run_id: ${{ env.RUN_ID }}
          name: master-outputs
          path: ./vm-test/worker

      - name: Extract Master Outputs
        working-directory: ./vm-test/worker
        run: |
          unzip master-outputs.zip || echo "No zip file found"
          if [[ -f master-outputs.env ]]; then
            # Loading all variables from the file into the environment
            export $(grep -v '^#' master-outputs.env | xargs)
            echo "MASTER_IP=$MASTER_IP" >> $GITHUB_ENV
            echo "K3S_TOKEN=$K3S_TOKEN" >> $GITHUB_ENV
            echo "NAMESPACE=$NAMESPACE" >> $GITHUB_ENV
          else
            echo "Error: master-outputs.env file not found!"
            exit 1
          fi


      - name: Verify MASTER_IP
        run: echo "Loaded MASTER_IP=${{ env.MASTER_IP }}"

      - name: Verify K3S_TOKEN
        run: echo "Loaded K3S_TOKEN=${{ env.K3S_TOKEN}}"

      - name: Verify NAMESPACE
        run: echo "Loaded NAMESPACE=${{ env.NAMESPACE }}"
      
      - name: Debug Master Outputs
        working-directory: ./vm-test/worker
        run: cat master-outputs.env || echo "No master-outputs.env file found"

      - name: Initialize OpenTofu
        working-directory: ./vm-test/worker
        run: tofu init
        
      - name: Apply OpenTofu Configuration
        working-directory: ./vm-test/worker
        env:
          MASTER_IP: ${{ env.MASTER_IP }}
          K3S_TOKEN: ${{ env.K3S_TOKEN }}
          NAMESPACE: ${{ env.NAMESPACE}}
        run: |
          tofu plan -var="namespace=cluster-${{ github.run_number }}" -var="master_ip=${MASTER_IP}" -var="k3s_token=${K3S_TOKEN}" -var="namespace_master=${NAMESPACE}"
          tofu apply -auto-approve -var="namespace=cluster-${{ github.run_number }}" -var="master_ip=${MASTER_IP}" -var="k3s_token=${K3S_TOKEN}" -var="namespace_master=${NAMESPACE}"
          
      - name: Upload tfstate as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: tofu-tfstate
          path: ./vm-test/worker/tofu.tfstate

      - name: Upload kubeconfig to database
        run: |
          CLUSTER_ID="cluster_${{ github.run_id }}"
          USER_ID="${{ github.actor }}"
          KUBECONFIG=$KUBECONFIG_FILE  # Assuming kubeconfig is stored here

          curl -X POST http://localhost:5000/insert \
            -H "Content-Type: application/json" \
            -d '{"cluster_id": "'"${CLUSTER_ID}"'", "user_id": "'"${USER_ID}"'", "kubeconfig": "'"${KUBECONFIG}"'"}'
